// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //************************************************************************************************ Handle A register
    
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aValue);
    Not(in=instruction[15], out=aIsSelected);
    Or(a=aIsSelected, b=instruction[5], out=aLoad);
    ARegister(in=aValue, load=aLoad, out=aOut, out[0..14]=addressM);
    
    //************************************************************************************************ Handle Alue (writeM)

    And(a=instruction[11], b=instruction[15], out=zx); //c1
    And(a=instruction[10], b=instruction[15], out=nx); //c2
    And(a=instruction[9], b=instruction[15], out=zy); //c3
    And(a=instruction[8], b=instruction[15], out=ny); //c4
    And(a=instruction[7], b=instruction[15], out=f); //c5
    And(a=instruction[6], b=instruction[15], out=no); //c6

    Mux16(a=aOut, b=inM, sel=instruction[12], out=aOrM);
    
    ALU(x=outD, y=aOrM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluOut, out=outM, zr=zero, ng=negative);
    And(a=instruction[15], b=instruction[3], out=writeM);
     
    //************************************************************************************************ Handle D register
    
    And(a=instruction[15], b=instruction[4], out=dLoad);
    DRegister(in=aluOut, load=dLoad ,out=outD);

    //************************************************************************************************ Handle  
    
    Or(a=zero, b=negative, out=zrOrNg);
    Not(in=zrOrNg, out=positive);

    And(a=instruction[0], b=positive, out=j1);
    And(a=instruction[1], b=zero, out=j2);
    And(a=instruction[2], b=negative, out=j3);

    Or(a=j1, b=j2, out=condition1);
    Or(a=condition1, b=j3, out=condition2);

    And(a=instruction[15], b=condition2, out=pcLoad);

    PC(in=aOut, inc=true, load=pcLoad , reset=reset, out[0..14]=pc);

}